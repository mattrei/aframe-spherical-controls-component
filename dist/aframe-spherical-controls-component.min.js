(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory():typeof define==="function"&&define.amd?define(factory):factory()})(this,function(){"use strict";if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("spherical-controls",{dependencies:["velocity"],schema:{enabled:{type:"boolean",default:true},radius:{type:"number",default:1.1},minRadius:{type:"number",default:0},maxRadius:{type:"number",default:0},speed:{type:"number",default:1},latLng:{type:"array",default:[0,0]},upVector:{type:"vec3",default:{x:0,y:1,z:0}}},init:function(){const data=this.data;this.paused=false;this.camera=this.el.sceneEl.camera;this.origin=new THREE.Vector3;this.position=new THREE.Vector3(0,1,0);this.position.setLength(this.data.radius);this.forward=new THREE.Vector3(0,0,1);this.look=new THREE.Vector3(-data.upVector.x,-data.upVector.y,-data.upVector.z)},update:function(oldData){const data=this.data;if(!oldData.latLng||oldData.latLng[0]!==data.latLng[0]||oldData.latLng[1]!==data.latLng[1]){const pos=this.xyzFromLatLon(parseFloat(data.latLng[0]),parseFloat(data.latLng[1]));pos.multiplyScalar(data.radius);this.position.copy(pos)}},tick:function(){var matrix=new THREE.Matrix4;return function(time,delta){if(!this.data.enabled||this.paused||this.speed<=0)return;delta=delta/1e3;const data=this.data;const velocity=data.speed*delta;var forward=this.getForward().setLength(velocity);if(this.position.add(forward)){const length=this.position.length();if(length<data.radius-data.minRadius){this.position.setLength(data.radius-data.minRadius)}else if(length>data.radius+data.maxRadius){this.position.setLength(data.radius+data.maxRadius)}}var up=this.position.clone().sub(this.origin).normalize();var tangent=up.clone().cross(this.look).normalize();var look=tangent.clone().cross(up).normalize();this.look=look;const c=matrix.elements;c[0]=tangent.x,c[1]=tangent.y,c[2]=tangent.z,c[3]=0;c[4]=up.x,c[5]=up.y,c[6]=up.z,c[7]=0;c[8]=look.x,c[9]=look.y,c[10]=look.z,c[11]=0;c[12]=this.position.x,c[13]=this.position.y,c[14]=this.position.z,c[15]=1;const object=this.el.object3D;object.matrixAutoUpdate=false;object.matrix=matrix;object.updateMatrixWorld()}}(),getForward:function(){const zaxis=new THREE.Vector3;return function(){this.camera.getWorldDirection(zaxis);return zaxis}}(),getLatLonAzimuth:function(){const position=this.position.clone();const nextPosition=position.clone().add(this.getForward());const latLon=this.latLonFromXYZ(position.x,position.y,position.z);const nextLatLon=this.latLonFromXYZ(nextPosition.x,nextPosition.y,nextPosition.z);const azimuth=Math.atan2(-(nextLatLon.lon-latLon.lon),nextLatLon.lat-latLon.lat);return{lat:latLon.lat,lon:latLon.lon,azimuth:azimuth}},latLonFromXYZ:function(x,y,z){const radius=Math.sqrt(Math.pow(x,2)+Math.pow(y,2)+Math.pow(z,2));const lat=Math.asin(y/radius);var lon=Math.atan2(x,z)-Math.PI/2;if(lon<-Math.PI){lon+=2*Math.PI}return{lat:lat,lon:lon}},xyzFromLatLon:function(lat,lon){const nlat=lat%90*Math.PI/180;const nlon=THREE.Math.degToRad((lon+180)%180);console.log((lon+90)%180);console.log(lon,nlon);return new THREE.Vector3(Math.cos(nlat)*Math.cos(nlon),Math.sin(nlat),Math.cos(nlat)*Math.sin(nlon))},remove:function(){},pause:function(){this.paused=true},play:function(){this.paused=false}})});
