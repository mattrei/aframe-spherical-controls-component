(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)})([function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("spherical-controls",{schema:{radius:{type:"number",default:1.1},minRadius:{type:"number",default:0},maxRadius:{type:"number",default:0},speed:{type:"number",default:1},lat:{type:"number",default:0},lng:{type:"number",default:0},upVector:{type:"vec3",default:{x:0,y:1,z:0}},vrMode:{type:"boolean",default:false},enabled:{type:"boolean",default:true}},init:function(){const el=this.el;const data=this.data;this.enabled=!data.vrMode;if(data.vrMode){el.sceneEl.addEventListener("enter-vr",()=>{if(!AFRAME.utils.device.checkHeadsetConnected()&&!AFRAME.utils.device.isMobile()){return}this.enabled=true});el.sceneEl.addEventListener("exit-vr",()=>{if(!AFRAME.utils.device.checkHeadsetConnected()&&!AFRAME.utils.device.isMobile()){return}this.enabled=false})}this.paused=false;this.camera=el.sceneEl.camera;this.origin=new THREE.Vector3;this.position=new THREE.Vector3(0,1,0);this.position.setLength(this.data.radius);this.forward=new THREE.Vector3(0,0,1);this.look=new THREE.Vector3(-data.upVector.x,-data.upVector.y,-data.upVector.z)},update:function(oldData){const data=this.data;if(oldData.lat!==data.lat||oldData.lng!==data.lng){const pos=this.latLngToPosition(data.lat,-data.lng).multiplyScalar(data.radius);this.position.copy(pos)}},tick:function(){var matrix=new THREE.Matrix4;return function(time,delta){if(!this.data.enabled||this.paused||!this.enabled||this.speed<=0)return;delta=delta/1e3;const data=this.data;const velocity=data.speed*delta;var forward=this._getForward().setLength(velocity);if(this.position.add(forward)){const length=this.position.length();if(length<data.radius-data.minRadius){this.position.setLength(data.radius-data.minRadius)}else if(length>data.radius+data.maxRadius){this.position.setLength(data.radius+data.maxRadius)}}var up=this.position.clone().sub(this.origin).normalize();var tangent=up.clone().cross(this.look).normalize();var look=tangent.clone().cross(up).normalize();this.look=look;const c=matrix.elements;c[0]=tangent.x,c[1]=tangent.y,c[2]=tangent.z,c[3]=0;c[4]=up.x,c[5]=up.y,c[6]=up.z,c[7]=0;c[8]=look.x,c[9]=look.y,c[10]=look.z,c[11]=0;c[12]=this.position.x,c[13]=this.position.y,c[14]=this.position.z,c[15]=1;const object=this.el.object3D;object.matrixAutoUpdate=false;object.matrix=matrix;object.updateMatrixWorld()}}(),_getForward:function(){const zaxis=new THREE.Vector3;return function(){this.camera.getWorldDirection(zaxis);return zaxis}}(),getLatLngAzimuth:function(){const position=this.position.clone();const nextPosition=position.clone().add(this._getForward());const latLng=this.positionToLatLng(position.x,position.y,position.z);const nextLatLng=this.positionToLatLng(nextPosition.x,nextPosition.y,nextPosition.z);const azimuth=Math.atan2(-(nextLatLng.lng-latLng.lng),nextLatLng.lat-latLng.lat);return{lat:THREE.Math.radToDeg(latLng.lat),lng:THREE.Math.radToDeg(latLng.lng),azimuth:THREE.Math.radToDeg(azimuth)}},positionToLatLng:function(x,y,z){const radius=Math.sqrt(Math.pow(x,2)+Math.pow(y,2)+Math.pow(z,2));const lat=Math.asin(y/radius);var lng=Math.atan2(x,z)-Math.PI/2;if(lng<-Math.PI){lng+=2*Math.PI}return{lat:lat,lng:lng}},latLngToPosition:function(lat,lng){const nlat=THREE.Math.degToRad(lat);const nlng=THREE.Math.degToRad(lng+0);return new THREE.Vector3(Math.cos(nlat)*Math.cos(nlng),Math.sin(nlat),Math.cos(nlat)*Math.sin(nlng))},remove:function(){},pause:function(){this.paused=true},play:function(){this.paused=false}})}]);
